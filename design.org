#+TITLE: アーキテクチャ設計

聖なる部分と不浄な部分を分けるのはOOPでもFPでも変わらない.

- dataとlogicの分離を意識する.
- 値(immutable)と状態(mutable)の分離を意識する.
- systemの内部と外部の分離を意識する.

* model

- アプリを構成する登場人物, 操作対象.
  - aka. Appliction Domain, Entity.
- Immutable data.
- キモはfirebase firestore連携.
  - model配下のnamespaceとfirestoreのdocumentを一致させる.
  - modelの初期化をintegrantで実施してfirestoreの情報を取得して定数として保持.

* proc

- serviceから呼び出される手続き, 関数の集合.
  - aka. Handler, Worker, Use Cases, フロー, シーケンス, ストアドプロシージャ.
- 状態と副作用をもってはならない.
- キモはprocedure call
  - デバック効率化のためにREPLから呼べるようにする.
    - 全て関数としてREPLから呼び出したい.
  - Clojureの世界ではリモートだろうとローカルだろうと全ては関数呼び出し.
    - RPC
    - HTTP Request
    - System Call
    - Stored Precedure

* service

- loop構造を持ち常駐するプロセス aka. サービス.
  - aka. Component, Gateway...etc.
- Mutable data.
  - 状態をもち状態遷移する.
  - Integrantで依存関係に従って初期化.
- 状態はIntegrantで管理するので宣言しない.
  - Integrantに状態管理を任せることによってoff/onの冪等性を獲得する.

* lib

- 外部とのやりとりを担当.
  - aka. framework, driver, client, infrastructure
- procから利用される.
